// PhysioFlow Database Schema with Better Auth Integration
// This schema combines Better Auth's authentication tables with our business domain

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// BETTER AUTH TABLES
// ============================================

// Core user table for Better Auth
// This replaces the old User table that was tied to Clerk
model user {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  image         String?
  role          UserRole  @default(PATIENT) // Our custom field
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Better Auth relations
  sessions      session[]
  accounts      account[]
  
  // Our business relations (one-to-one)
  patient       Patient?
  doctor        Doctor?
  
  // Document relations
  uploadedDocuments Document[] @relation("DocumentUploader")
  
  // Phone number fields from plugin
  phoneNumber          String?   @unique
  phoneNumberVerified  Boolean   @default(false)

  @@map("user")
}

// Sessions table - stores active user sessions
// Each login creates a session with expiration
model session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique // Better Auth requires this field for session tokens
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

// OAuth accounts - links social providers to users
// Stores provider-specific data (Google, etc.)
model account {
  id                String   @id @default(cuid())
  userId            String
  accountId         String   // Better Auth requires this field
  providerId        String   // Better Auth internal field
  provider          String   @default("credential") // Better Auth requires this field (e.g., "google", "credential")
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?
  scope             String?
  password          String?  // For credential accounts
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, accountId])
  @@map("account")
}

// Verification tokens - for email verification, password reset, etc.
model verificationToken {
  id         String   @id @default(cuid())
  token      String   @unique
  type       String   // "email", "password-reset", etc.
  identifier String   // email or phone number
  expiresAt  DateTime
  
  createdAt  DateTime @default(now())

  @@map("verification_token")
}

// ============================================
// BUSINESS DOMAIN TABLES
// ============================================

// Patient-specific information
model Patient {
  id            String    @id @default(cuid())
  userId        String    @unique  // Links to user.id (not clerkUserId anymore!)
  
  // Patient details
  firstName     String    // Denormalized for quick access
  lastName      String    // Denormalized for quick access
  phone         String    // Denormalized and formatted
  dateOfBirth   DateTime
  address       String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments  Appointment[]
  documents     Document[]    @relation("PatientDocuments")

  @@map("patients")
}

// Doctor-specific information
model Doctor {
  id             String    @id @default(cuid())
  userId         String    @unique  // Links to user.id
  
  // Doctor details
  firstName      String    // Denormalized for quick access
  lastName       String    // Denormalized for quick access
  specialization String?
  isActive       Boolean   @default(true)
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  user           user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments   Appointment[]
  documents      Document[]    @relation("DoctorDocuments")

  @@map("doctors")
}

// Appointments - core business entity (unchanged)
model Appointment {
  id                  String            @id @default(cuid())
  
  // Core relationships
  patientId           String
  doctorId            String
  
  // Appointment details
  type                AppointmentType
  status              AppointmentStatus @default(SCHEDULED)
  
  // Scheduling
  scheduledDateTime   DateTime
  durationMinutes     Int               @default(60)
  
  // Optional information
  reasonForVisit      String?
  notes               String?
  
  // System fields
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relations
  patient             Patient           @relation(fields: [patientId], references: [id])
  doctor              Doctor            @relation(fields: [doctorId], references: [id])
  documents           Document[]        @relation("AppointmentDocuments")

  @@map("appointments")
}

// Document management for patient files, clinical notes, etc.
model Document {
  id                  String            @id @default(cuid())
  
  // File information
  fileName            String
  fileType            String            // MIME type
  fileSize            Int               // Size in bytes
  s3Key               String            @unique // S3 object key
  
  // Ownership and association
  uploadedBy          String            // userId of uploader
  patientId           String
  doctorId            String?           // optional, for documents uploaded by doctors
  appointmentId       String?           // optional, for appointment-specific documents
  
  // Categorization and access
  category            DocumentCategory
  description         String?
  isSharedWithPatient Boolean           @default(false)
  
  // System fields
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  
  // Relations
  patient             Patient           @relation("PatientDocuments", fields: [patientId], references: [id])
  doctor              Doctor?           @relation("DoctorDocuments", fields: [doctorId], references: [id])
  appointment         Appointment?      @relation("AppointmentDocuments", fields: [appointmentId], references: [id])
  uploadedByUser      user              @relation("DocumentUploader", fields: [uploadedBy], references: [id])

  @@map("documents")
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  PATIENT
  DOCTOR
  STAFF
}

enum AppointmentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  FIRST_CONSULT
  CHECK_UP
  FOLLOW_UP
}

enum DocumentCategory {
  MEDICAL_HISTORY
  LAB_RESULTS
  PRESCRIPTION
  IMAGING
  CLINICAL_NOTES
  CONSENT_FORM
  INSURANCE
  OTHER
}